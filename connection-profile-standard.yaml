---
#
# Copyright Lambda256 Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "Basic-Plan-Network-Config"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "Basic Plan Network"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"

#
# The client section is SDK-specific. The sample below is for the node.js SDK
#
client:
  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: Org1

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Specific to FileKeyValueStore.js or similar implementations in other SDKs. Can be others
    # if using an alternative impl. For instance, CouchDBKeyValueStore.js would require an object
    # here for properties like url, db name, etc.
    path: "/tmp/hfc-kvs"

    # [Optional]. Specific to the CryptoSuite implementation. Software-based implementations like
    # CryptoSuite_ECDSA_AES.js in node SDK requires a key store. PKCS#11 based implementations does
    # not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: "/tmp/hfc-cvs"

    # [Optional]. Specific to Composer environment
    wallet: wallet-name

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  mychannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer.example.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

      peer1.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    # [Optional]. what chaincodes are expected to exist on this channel? The application can use
    # this information to validate that the target peers are in the expected state by comparing
    # this list with the query results of getInstalledChaincodes() and getInstantiatedChaincodes()
    #chaincodes:
      # the format follows the "cannonical name" of chaincodes by fabric code
      #- mycc:1.0

#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: Org1MSP

    peers:
      - peer0.org1.example.com
      - peer1.org1.example.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca-org1

    # [Optional]. If the application is going to make requests that are reserved to organization
    # administrators, including creating/updating channels, installing/instantiating chaincodes, it
    # must have access to the admin identity represented by the private key and signing certificate.
    # Both properties can be the PEM string or local path to the PEM file. Note that this is mainly for
    # convenience in development mode, production systems should not expose sensitive information
    # this way. The SDK should allow applications to set the org admin identity via APIs, and only use
    # this route as an alternative when it exists.
    adminPrivateKey:
      #path: ./fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/
      pem:  |
        -----BEGIN PRIVATE KEY-----
        MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgD05PLz94EMKGbmAf
        JQd4yFiuCxgFLVgh2DLfMi3Vna2hRANCAASaMEDp6tO6coSszR8oHPJtQOZd+upL
        DsFzRUoX3G0tXI3FQUposOyL+7iaosLgC9wkISWpmfegGmxIkHDAkJqn
        -----END PRIVATE KEY-----
        

    signedCert:
      #path: ./fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem
      pem:  |
        -----BEGIN CERTIFICATE-----
        MIICKTCCAdCgAwIBAgIQIwJXk6i6ldgDyFRBEDiYijAKBggqhkjOPQQDAjBzMQsw
        CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
        YW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu
        b3JnMS5leGFtcGxlLmNvbTAeFw0xOTA4MjAxMTA3MDBaFw0yOTA4MTcxMTA3MDBa
        MGwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T
        YW4gRnJhbmNpc2NvMQ8wDQYDVQQLEwZjbGllbnQxHzAdBgNVBAMMFkFkbWluQG9y
        ZzEuZXhhbXBsZS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASaMEDp6tO6
        coSszR8oHPJtQOZd+upLDsFzRUoX3G0tXI3FQUposOyL+7iaosLgC9wkISWpmfeg
        GmxIkHDAkJqno00wSzAOBgNVHQ8BAf8EBAMCB4AwDAYDVR0TAQH/BAIwADArBgNV
        HSMEJDAigCBX6T0qHUKEP7NT7czJ1i3TsozOQRdeA+QpUHoJfz0hVzAKBggqhkjO
        PQQDAgNHADBEAiA72oFDx/585/CEGwsI+XrhW/tJDVGEkl/7IuBco+xu2AIgdClZ
        iSTPe4gKT1BEKuHb+xKua5B+AccuKCZC0nUGnQQ=
        -----END CERTIFICATE-----
        

  # the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.example.com:
    url: grpcs://localhost:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
#      ssl-target-name-override: orderer.example.com
      sslProvider: openSSL
      negotiationType: TLS
      hostnameOverride: orderer.example.com
      grpc-max-send-message-length: 15
      grpc.keepalive_time_ms: 360000
      grpc.keepalive_timeout_ms: 180000

    #tlsCACerts:
      #path: ./fabric-samples/first-network/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

    tlsCACerts:
      pem:  |
        -----BEGIN CERTIFICATE-----
        MIICQjCCAemgAwIBAgIQXxzkYE5ONEh0OmJ5y+UJ/TAKBggqhkjOPQQDAjBsMQsw
        CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
        YW5jaXNjbzEUMBIGA1UEChMLZXhhbXBsZS5jb20xGjAYBgNVBAMTEXRsc2NhLmV4
        YW1wbGUuY29tMB4XDTE5MDgyMDExMDcwMFoXDTI5MDgxNzExMDcwMFowbDELMAkG
        A1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFu
        Y2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRowGAYDVQQDExF0bHNjYS5leGFt
        cGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABIuBKCWqZtUeq3MRbE19
        RMxV1tuBEbjIQURjC5vqbOUI0V54GICY4cQq37IsrhrErfah9oGdzTauDKBON6wP
        2/KjbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYB
        BQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQg47NEpD+h8mWMB+umTvhA
        iVAYIUWUsMqQsJMyzrbqdyYwCgYIKoZIzj0EAwIDRwAwRAIgB2CcxvypJwXhIP2T
        hRepH+FIlCguojugdqlgA7wAdlQCIA7SkbbqEp9Fah/FILik77/CXG0Lto2iM63g
        46tQt2Q2
        -----END CERTIFICATE-----
        

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:7051

    grpcOptions:
      grpc.http2.keepalive_time: 15
      ssl-target-name-override: peer0.org1.example.com
      negotiationType: TLS
      sslProvider: openSSL
      hostnameOverride: peer0.org1.example.com

    #tlsCACerts:
      #path: ./fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt

    tlsCACerts:
      pem:  |
        -----BEGIN CERTIFICATE-----
        MIICZjCCAg2gAwIBAgIQK06TEPlEp3y6mI5U1l79gDAKBggqhkjOPQQDAjB2MQsw
        CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
        YW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0GA1UEAxMWdGxz
        Y2Eub3JnMS5leGFtcGxlLmNvbTAeFw0xOTA4MjAxMTA3MDBaFw0yOTA4MTcxMTA3
        MDBaMFsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH
        Ew1TYW4gRnJhbmNpc2NvMR8wHQYDVQQDExZwZWVyMC5vcmcxLmV4YW1wbGUuY29t
        MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEXKsfLBjr8JTIrYU7RCnsMqOVrPSw
        YG3RJq/xu8lpA6SytweCYSGp58ldcf1xH02mQ78b4tOJQyygwYDLjLLyC6OBlzCB
        lDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
        MAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgUbPcydpK8CdGj9IMDxEN/XbYdBG0
        b8hOB60DmLGCecQwKAYDVR0RBCEwH4IWcGVlcjAub3JnMS5leGFtcGxlLmNvbYIF
        cGVlcjAwCgYIKoZIzj0EAwIDRwAwRAIgcD77feEBXDHqDd0BoXjMqB/P53aUICOb
        raL0r7NpGJUCIB2VISNAFVmLsy1MsYRT3KE1gIxK50Yv7/D6EEYzmeJW
        -----END CERTIFICATE-----
        

  peer1.org1.example.com:
    url: grpcs://localhost:8051

    grpcOptions:
      grpc.http2.keepalive_time: 15
      ssl-target-name-override: peer1.org1.example.com
      negotiationType: TLS
      sslProvider: openSSL
      hostnameOverride: peer1.org1.example.com

    #tlsCACerts:
      #path: ./fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt

    tlsCACerts:
      pem:  |
        -----BEGIN CERTIFICATE-----
        MIICaDCCAg6gAwIBAgIRANEV8/d/zaBUUb5APq2OT6owCgYIKoZIzj0EAwIwdjEL
        MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
        cmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRs
        c2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMTkwODIwMTEwNzAwWhcNMjkwODE3MTEw
        NzAwWjBbMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UE
        BxMNU2FuIEZyYW5jaXNjbzEfMB0GA1UEAxMWcGVlcjEub3JnMS5leGFtcGxlLmNv
        bTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABJpX7CJArA2xnppv/vGkosHM34HZ
        0/ucQoPNwPINQJ0xEk+/wR/V3YUYwCnUCEgOvHDboZea7puX1OR1kgJ4ZjijgZcw
        gZQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcD
        AjAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIFGz3MnaSvAnRo/SDA8RDf122HQR
        tG/ITgetA5ixgnnEMCgGA1UdEQQhMB+CFnBlZXIxLm9yZzEuZXhhbXBsZS5jb22C
        BXBlZXIxMAoGCCqGSM49BAMCA0gAMEUCIQDzvpz8HpGhkUdvFqaMEoZp3jLkuc5l
        trztPIFQ7BLlCQIgKoACX0SmUcDODMbzwitpG+yHMQBXvrjbwmfUjJuHe2A=
        -----END CERTIFICATE-----
        

#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca-org1:
    url: http://localhost:7054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: true

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar: #single entitiy
      - enrollId: admin
        enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca-org1
